name: Build and deploy Aseprite

on:
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release
  
jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body' | base64)
        
        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
        
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_ENV
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_ENV
        echo "version_info=${VERSION_INFO}" >> $GITHUB_ENV

    - name: Load version from cache
      id: version_check
      uses: actions/cache@v4
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: cached_version
    - name: Should we start new build?
      id: should_build
      run: echo "should_build=true" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info | fromJson | base64Decode }}
        draft: true
        prerelease: false
  
  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Setup build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y ninja-build
      - name: Setup build dependencies
        if: matrix.os == 'macos-latest'
        run: brew install ninja
      - name: Setup build dependencies
        if: matrix.os == 'windows-latest'
        run: choco install ninja
      - name: Configure build
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      - name: Build Aseprite
        run: cmake --build build
      - name: Package Aseprite
        run: |
          mkdir -p dist
          cp build/bin/aseprite dist/
          tar -czf aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.tar.gz -C dist aseprite
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: dist/aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.tar.gz
          asset_name: aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip
